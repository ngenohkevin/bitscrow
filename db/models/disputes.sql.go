// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: disputes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDisputes = `-- name: CreateDisputes :one
INSERT INTO disputes(id, escrow_id, reason, resolved, resolution, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, escrow_id, reason, resolved, resolution, created_at, updated_at
`

type CreateDisputesParams struct {
	ID         int32            `json:"id"`
	EscrowID   pgtype.Int4      `json:"escrow_id"`
	Reason     string           `json:"reason"`
	Resolved   pgtype.Bool      `json:"resolved"`
	Resolution pgtype.Text      `json:"resolution"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateDisputes(ctx context.Context, arg CreateDisputesParams) (Dispute, error) {
	row := q.db.QueryRow(ctx, createDisputes,
		arg.ID,
		arg.EscrowID,
		arg.Reason,
		arg.Resolved,
		arg.Resolution,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Dispute
	err := row.Scan(
		&i.ID,
		&i.EscrowID,
		&i.Reason,
		&i.Resolved,
		&i.Resolution,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDisputes = `-- name: GetDisputes :one
SELECT id, escrow_id, reason, resolved, resolution, created_at, updated_at FROM disputes WHERE id = $1
`

func (q *Queries) GetDisputes(ctx context.Context, id int32) (Dispute, error) {
	row := q.db.QueryRow(ctx, getDisputes, id)
	var i Dispute
	err := row.Scan(
		&i.ID,
		&i.EscrowID,
		&i.Reason,
		&i.Resolved,
		&i.Resolution,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDisputes = `-- name: UpdateDisputes :exec
UPDATE disputes
SET escrow_id = $2, reason = $3, resolved = $4, resolution = $5, created_at = $6, updated_at = $7
WHERE id = $1
RETURNING id, escrow_id, reason, resolved, resolution, created_at, updated_at
`

type UpdateDisputesParams struct {
	ID         int32            `json:"id"`
	EscrowID   pgtype.Int4      `json:"escrow_id"`
	Reason     string           `json:"reason"`
	Resolved   pgtype.Bool      `json:"resolved"`
	Resolution pgtype.Text      `json:"resolution"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateDisputes(ctx context.Context, arg UpdateDisputesParams) error {
	_, err := q.db.Exec(ctx, updateDisputes,
		arg.ID,
		arg.EscrowID,
		arg.Reason,
		arg.Resolved,
		arg.Resolution,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
